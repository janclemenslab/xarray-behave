name: Publish to PyPI and Anaconda.org

on:
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'manual run'

jobs:

#   tests:
#     runs-on: ${{ matrix.os }}
#     strategy:
#       matrix:
#         python-version: [3.7, 3.8, 3.9]
#         os: [ubuntu-latest, windows-latest, macOS-latest]

#     steps:
#       - name: Checkout source
#         uses: actions/checkout@v2

#       - name: Setup Mamba
#         uses: conda-incubator/setup-miniconda@v2
#         # https://github.com/conda-incubator/setup-miniconda
#         with:
#           python-version: ${{ matrix.python-version }}
#           mamba-version: "*"
#           channels: conda-forge,ncb
#           use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
#           use-mamba: true

#       - name: Install pytest
#         shell: bash -l {0}
#         run: |
#           conda install pytest

#       - name: Run tests
#         shell: bash -l {0}
#         run: |
#           pip install .
#           pytest


#   publish_to_pypi:
#     name: Publish to PyPi
# #     needs: [tests]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout source
#         uses: actions/checkout@v2

#       - name: Setup Mamba
#         uses: conda-incubator/setup-miniconda@v2
#         # https://github.com/conda-incubator/setup-miniconda
#         with:
#           python-version: ${{ matrix.python-version }}
#           mamba-version: "*"
#           channels: conda-forge,ncb
#           use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
#           use-mamba: true

#       - name: Install flit
#         shell: bash -l {0}
#         run: |
#           conda install flit~=3.0

#       - name: Build and publish
#         shell: bash -l {0}
#         run: |
#           python -m flit publish
#         env:
#           FLIT_USERNAME: ${{ secrets.FLIT_USERNAME }}
#           FLIT_PASSWORD: ${{ secrets.FLIT_PASSWORD }}


  publish_to_anaconda:
    name: Publish to Anaconda.org
#     needs: [tests, publish_to_pypi]
#     needs: [publish_to_pypi]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: False
      matrix:
        python-version: [3.7, 3.8, 3.9]
#        python-version: [3.7]
        os: [ubuntu-latest, windows-latest, macOS-latest]
#         os: [ubuntu-latest, macOS-latest]
#       os: [windows-latest]
        exclude:
        - os: macos-latest
          python-version: 3.7
        - os: windows-latest
          python-version: 3.7
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Setup Mamba
        uses: conda-incubator/setup-miniconda@v2
        # https://github.com/conda-incubator/setup-miniconda
        with:
          python-version: ${{ matrix.python-version }}
          mamba-version: "*"
          channels: conda-forge,ncb
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
          use-mamba: true
          
      - name: Install build dependencies (win)
        if: runner.os == 'Windows'
        shell: cmd /C CALL {0}
        run: |
          conda install -y -n base -c conda-forge python=3.8 boa anaconda-client conda-build conda-verify
          conda config --set anaconda_upload yes
          conda config --set always_yes yes --set changeps1 no

      - name: Install build dependencies (*x)
        if: runner.os != 'Windows'
        shell: bash -l {0}
        run: |
          conda install -y -n base -c conda-forge python=3.8 boa anaconda-client conda-build conda-verify
          conda config --set anaconda_upload yes
          conda config --set always_yes yes --set changeps1 no

      - name: Build nogui and upload to anaconda (win)
        if: runner.os == 'Windows'
        shell: cmd /C CALL {0}
        run: |
          conda build conda/xarray-behave-nogui -c conda-forge -c ncb -c anaconda --python ${{ matrix.python-version }} --user ncb --token %ANACONDA_TOKEN%
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}

      - name: Build gui and upload to anaconda (win)
        if: runner.os == 'Windows'
        shell: cmd /C CALL {0}
        run: |
          conda build conda/xarray-behave -c conda-forge -c ncb -c anaconda --python ${{ matrix.python-version }} --user ncb --token %ANACONDA_TOKEN%
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}

      - name: Build nogui and upload to anaconda (*x)
        if: runner.os != 'Windows'
        shell: bash -l {0}
        run: |
          conda mambabuild conda/xarray-behave-nogui -c conda-forge -c ncb -c anaconda --python ${{ matrix.python-version }} --user ncb --token $ANACONDA_TOKEN
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}

      - name: Build gui and upload to anaconda (*x)
        if: runner.os != 'Windows'
        shell: bash -l {0}
        run: |
          conda mambabuild conda/xarray-behave -c conda-forge -c ncb -c anaconda --python ${{ matrix.python-version }} --user ncb --token $ANACONDA_TOKEN
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
